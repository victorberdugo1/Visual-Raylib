// Translation

translation_data TranslationBackup;

void SaveBackupTranslation()
{
  // Here we save a copy of the original SCRPT
  // This function will back up the script, choices, menu, and characters.

  // Script - Save translation backup
  int script_count = 0;
  for (int i = 0; i < sizeof(SCRPT) / sizeof(SCRPT[0]); i++)
  {
    if (SCRPT[i].t == N)
    {
      script_count++;
    }
  }

  char* trans_backup_script[script_count];
  int i_trans_script = 0;
  for (int i = 0; i < sizeof(SCRPT) / sizeof(SCRPT[0]); i++)
  {
    if (SCRPT[i].t == N)
    {
      trans_backup_script[i_trans_script] = SCRPT[i].c;
      i_trans_script++;
    }
  }
  TranslationBackup.trans_script = trans_backup_script;

  // TODO: Add backup for choices, menu, and characters as needed
}

void ExportTranslation() 
{
  FILE* translation_file = fopen("./translation/translation_file.h", "w");
  if (translation_file == NULL) {
    printf("Error: Could not open translation file for writing\n");
    return;
  }

  fprintf(translation_file, "//Translation file generated by VNES\n");
  fprintf(translation_file, "//DON'T EDIT THIS FILE!! The content of this file will be deleted.\n//-> Make a copy and start your translation. Then, you can include your file into the project.\n\n");

  // Print SCRPT
  fprintf(translation_file, "//SCRPT :\n");
  fprintf(translation_file, "char* trans_00_script[] = {\n");
  for (int i = 0; i < sizeof(SCRPT) / sizeof(SCRPT[0]); i++)
  {
    if (SCRPT[i].t == N)
    {
      fprintf(translation_file, "\t/*[%d] \"%s\"*/\n", i, SCRPT[i].c);
      fprintf(translation_file, "\t\"\",\n");
    }
    else if (SCRPT[i].t == LABEL)
    {
      fprintf(translation_file, "//%s-------\n", SCRPT[i].c);
    }
  }
  fprintf(translation_file, "};\n\n");

  // Print CHOICES (Optional)
  fprintf(translation_file, "//CHOICES :\n");
  fprintf(translation_file, "char* trans_00_choice[] = {\n");
  for (int i = 0; i < sizeof(ListeChoix) / sizeof(ListeChoix[0]); i++)
  {
    fprintf(translation_file, "\t/*[%d] \"%s\" -> %s*/\n", i, ListeChoix[i].txt, ListeChoix[i].jmp);
    fprintf(translation_file, "\t\"\",\n");
  }
  fprintf(translation_file, "};\n\n");

  // Print MENU (Optional)
  fprintf(translation_file, "//MENU :\n");
  fprintf(translation_file, "char* trans_00_menu[] = {\n");
  for (int i_page = 0; i_page < MenuPageNumber; i_page++)
  {
    fprintf(translation_file, "//%s-------\n", ListMenuPage[i_page].title);
    for (int i_item = 0; i_item < MAX_ITEMS_MENU_PAGE; i_item++)
    {
      if (ListMenuPage[i_page].items[i_item].label != NULL)
      {
        fprintf(translation_file, "\t/*[%d][%d] \"%s\"*/\n", i_page, i_item, ListMenuPage[i_page].items[i_item].label);
        fprintf(translation_file, "\t\"\",\n");
      }
    }
  }
  fprintf(translation_file, "};\n\n");

  // Print CHARACTERS (Optional)
  fprintf(translation_file, "//CHARACTERS :\n");
  fprintf(translation_file, "char* trans_00_characters[] = {\n");
  for (int i_chara = 0; i_chara < CHARACTER_NUMBER; i_chara++)
  {
    fprintf(translation_file, "\t/*[%d] \"%s\"*/\n", i_chara, CharaList[i_chara].name);
    fprintf(translation_file, "\t\"\",\n");
  }
  fprintf(translation_file, "};\n\n");

  fclose(translation_file);

  // Optionally, create a backup translation file if needed
}

void LOADTRANSLATION()
{
  char key[3] = "eng";
  translation_data translate_data_to_apply = {"aaa", 0, 0, 0, 0};

  if (strcmp(current_language, default_language) == 0)
  {
    strncpy(current_language, key, 3);

    // Search for matching translation data and apply it
    for (int i = 0; i < sizeof(TranslationData) / sizeof(TranslationData[0]); i++)
    {
      if (strcmp(key, TranslationData[i].key) == 0)
      {
        translate_data_to_apply = TranslationData[i];
      }
    }
  }
  else
  {
    strncpy(current_language, default_language, 3);
    translate_data_to_apply = TranslationBackup;
  }

  // Replace SCRPT
  int i_trans_script = 0;
  for (int i_script = 0; i_script < sizeof(SCRPT) / sizeof(SCRPT[0]); i_script++)
  {
    if (SCRPT[i_script].t == N)
    {
      char* translate_script = translate_data_to_apply.trans_script[i_trans_script];
      if (strcmp(translate_script, "") != 0)
      {
        SCRPT[i_script].c = translate_script;
      }
      i_trans_script++;
    }
  }

  // Optional: Add translation logic for Choices, Menu, and Characters
}

